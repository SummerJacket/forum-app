import express from 'express';
import cookieParser from 'cookie-parser';
import logger from 'morgan';
import cors from 'cors';
import passport from 'passport';
import mongoose from 'mongoose';
import productController from './controllers/product.controller';
import threadController from './controllers/thread.controller';
import replyController from './controllers/reply.controller';
import indexRoute from './routes/index.route';
import userRoute from './routes/user.route';
import { resource } from './routes/utils';
import authConfig from './config/passport';

const dbURL =
  process.env.MONGODB_URI ||
  'mongodb://root:password1@ds243254.mlab.com:43254/forum';

mongoose.connect(
  dbURL,
  {
    useCreateIndex: true,
    useNewUrlParser: true,
  },
);
mongoose.Promise = Promise;

const db = mongoose.connection;
// eslint-disable-next-line no-console
db.on('error', console.error.bind(console, 'MongoDB connection error:'));

const app = express();

// default middleware generated by express
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
// app.use(express.static(path.join(__dirname, '../client/dist/index.html')));

// enable CORS
app.use(cors());

// authentication middleware
app.use(passport.initialize());
app.use(passport.session());

authConfig(passport);

// route middleware
app.use('/', indexRoute);
resource(app, '/products/', productController);
resource(app, '/threads/', threadController);
resource(app, '/replies/', replyController);

app.use('/users', userRoute);

// 404
app.get('*', (req, res, next) => {
  const err = new Error('Not Found');
  err.status = 404;
  next(err);
});

module.exports = app;
